变量的声明和执行
(function(){
	var a = 1;
	console.log(a())
	function a(){
		return 2
	}
})()//a is not a function

(function(){
	function a(){
		return 2
	}
	console.log(a())
	var a = 1;
})()//2

##当进入执行上下文时，这时候还没有执行代码

变量对象会包括：

    函数的所有形参 (如果是函数上下文)
        由名称和对应值组成的一个变量对象的属性被创建
        没有实参，属性值设为 undefined

    函数声明
        由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建
        如果变量对象已经存在相同名称的属性，则完全替换这个属性

    变量声明
        由名称和对应值（undefined）组成一个变量对象的属性被创建；
        如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性

//apply的实现（闭包实现对context对象的访问，使调用函数成为context对象的成员函数，改变this指向）
Function.prototype.apply = function (context, arr) {
    var context = Object(context) || window;
    context.fn = this;（this指向调用时的对象）

    var result;
    if (!arr) {
        result = context.fn();
    }
    else {
        var args = [];
        for (var i = 0, len = arr.length; i < len; i++) {
            args.push('arr[' + i + ']');
        }
        result = eval('context.fn(' + args + ')')
    }

    delete context.fn
    return result;
}
